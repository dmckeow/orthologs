nextflow.enable.dsl     = 2
nextflow.preview.output = true

params {
    samplesheet = 'example_data/samplesheet.csv'
    search_params = 'example_data/samplesheet.csv'
    outdir = 'results/example'
    workdir = 'work'
    runName = "${params.outdir.tokenize('/')}"
    mcl_inflation = 2.5
    // Provide an external species tree for generax - one rooted bifurcating tree in newick format
    species_tree = false
    array_size = 1

    // Orthogroup filtering options
    min_num_seq_per_og         = 4
    min_num_spp_per_og         = 2
    min_prop_spp_for_spptree   = 0.75
    min_num_grp_per_og         = 1
    max_copy_num_spp_tree      = 5
    max_copy_num_gene_trees    = 10

    // Alignment method
    aligner                    = 'witch'

    // Tree Inference method
    tree_method                = 'fasttree'
    outgroups                  = 'none'

    // Alignment trimmer options
    msa_trimmer                = 'none'
    min_ungapped_length        = 20

    // IQ-TREE options
    tree_model                 = 'LG+F+G4'
    tree_model_pmsf            = 'none'

    // Boilerplate options
    outdir                     = null
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'
    enable_conda               = false

    run {
        prefilter_hmmsearch    = true
        orthofinder            = true
        broccoli               = true
        broccoli_array         = false
    }
}

includeConfig 'conf/base.config'
includeConfig 'conf/modules.config'

workDir   = "${params.workdir}"


// Profiles

profiles {
    slurm {
        includeConfig 'conf/slurm.config'  
    } 
}

// Management stuff
manifest {
    name = 'crg-bcaortho'
    description = 'pipeline'
    author = 'Dean Mckeown'
    version = '1.0.0'
    nextflowVersion = '24.10.4'
    homePage = 'https://github.com/dmckeow/crg-bcaortho'
}

// Resource usage reports

workflow.onComplete = {
    println "Pipeline completed at: $workflow.complete"
    println "Execution status: ${ workflow.success ? 'OK' : 'failed' }"
    println "Pipeline parameters:"
    params.each { k, v ->
        println "  $k: $v"
    }
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
report {
    enabled = true
    file = "${params.outdir}/pipeline_info/${trace_timestamp}_report.html"
    showSkipped = false
    showTaskCacheInfo = false
    showTaskResources = true
    showTaskResourcesPercentage = true
}

timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/${trace_timestamp}_timeline.html"
}

trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/${trace_timestamp}_trace.tsv"
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes'
}

dag {
    enabled = true
    verbose = false
    file = "${params.outdir}/pipeline_info/${trace_timestamp}_dag.html"
    depth = 1
}
